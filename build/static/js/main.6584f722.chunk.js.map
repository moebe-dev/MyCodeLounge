{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","Components/icon.js","Components/search.js","Components/tRButtons.js","Components/leftSidebutton.js","Components/cards.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","makeStyles","theme","root","margin","spacing","padding","display","alignItems","width","height","input","marginLeft","flex","iconButton","flexDirection","withStyles","boxShadow","textTransform","fontSize","border","lineHeight","backgroundColor","borderColor","fontFamily","join","Button","color","palette","getContrastText","purple","createMuiTheme","primary","orange","minWidth","bullet","transform","title","pos","marginBottom","axios","get","App","API","fetch","method","headers","Accept","res","json","result","success","UserStore","console","log","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAee,MATX,aAAe,oBACXA,YAAiBC,KAAM,CACnBC,SAAS,EACTC,YAAY,EACZC,SAAU,M,QCQPC,E,uKAfD,IAAD,OACL,OACI,yBAAKC,UAAU,cACX,2BACIA,UAAU,QACVC,KAAMN,KAAKO,MAAMD,KACjBE,YAAaR,KAAKO,MAAMC,YACxBC,MAAOT,KAAKO,MAAME,MAClBC,SAAU,SAACC,GAAD,OAAO,EAAKJ,MAAMG,SAASC,EAAEC,OAAOH,e,GATzCI,IAAMC,WCgBhBC,E,uKAfD,IAAD,OACL,OACI,yBAAKV,UAAU,gBACX,4BACIA,UAAU,MACVW,SAAUhB,KAAKO,MAAMS,SACrBC,QAAS,kBAAM,EAAKV,MAAMU,YAEzBjB,KAAKO,MAAMW,W,GATLL,IAAMC,W,GCGTD,IAAMC,U,sBCDZK,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,UAAW,CACTC,OAAQF,EAAMG,QAAQ,S,4BCCVJ,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,OAAQ,OACRE,QAAS,UACTC,QAAS,OACTC,WAAY,SACZC,MAAO,IACPC,OAAQ,IAEVC,MAAO,CACLC,WAAYV,EAAMG,QAAQ,GAC1BQ,KAAM,GAERC,WAAY,CACVR,QAAS,Q,oBCjBKL,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJI,QAAS,OACTQ,cAAe,SACfP,WAAY,SACZ,QAAS,CACPJ,OAAQF,EAAMG,QAAQ,S,yECNJW,YAAW,CACjCb,KAAM,CACJc,UAAW,OACXC,cAAe,OACfC,SAAU,GACVb,QAAS,WACTc,OAAQ,YACRC,WAAY,IACZC,gBAAiB,UACjBC,YAAa,UACbC,WAAY,CACV,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,KACP,UAAW,CACTH,gBAAiB,UACjBC,YAAa,UACbN,UAAW,QAEb,WAAY,CACVA,UAAW,OACXK,gBAAiB,UACjBC,YAAa,WAEf,UAAW,CACTN,UAAW,qCAjCOD,CAoCrBU,KAEiBV,aAAW,SAACd,GAAD,MAAY,CACzCC,KAAM,CACJwB,MAAOzB,EAAM0B,QAAQC,gBAAgBC,IAAO,MAC5CR,gBAAiBQ,IAAO,KACxB,UAAW,CACTR,gBAAiBQ,IAAO,UALVd,CAQhBU,KAEczB,aAAW,SAACC,GAAD,MAAY,CACvCE,OAAQ,CACNA,OAAQF,EAAMG,QAAQ,QAIZ0B,YAAe,CAC3BH,QAAS,CACPI,QAASC,O,4BCrDKhC,YAAW,CAC3BE,KAAM,CACJ+B,SAAU,KAEZC,OAAQ,CACN5B,QAAS,eACTH,OAAQ,QACRgC,UAAW,cAEbC,MAAO,CACLlB,SAAU,IAEZmB,IAAK,CACHC,aAAc,M,sBCnBH,EACO,WACd,OAAOC,IAAMC,IAAI,2BCKnBC,E,2SAEYC,I,kBAIIC,MAAM,cAAe,CACnCC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sB,cAJhBC,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,SACnBC,EAAUrE,SAAU,EACpBqE,EAAUpE,YAAa,EACvBoE,EAAUnE,SAAWiE,EAAOjE,WAE5BmE,EAAUrE,SAAU,EACpBqE,EAAUpE,YAAa,G,kDAGzBoE,EAAUrE,SAAU,EACpBqE,EAAUpE,YAAa,E,4RAMP4D,MAAM,UAAW,CAC/BC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sB,cAJhBC,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,UACnBC,EAAUpE,YAAa,EACvBoE,EAAUnE,SAAW,I,kDAGvBoE,QAAQC,IAAR,M,+IA2BA,OACE,0C,GA3EU3D,IAAMC,WAuFT2D,cAASb,GCpFJc,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.6584f722.chunk.js","sourcesContent":["import { extendObservable } from \"mobx\";\n\n/**\n * UserStores\n */\nclass UserStore {\n    constructor() {\n        extendObservable(this, {\n            loading: true,\n            isLoggedIn: false,\n            username: \"\",\n        });\n    }\n}\n\nexport default new UserStore();\n","import React from \"react\";\n\nclass InputField extends React.Component {\n    render() {\n        return (\n            <div className=\"inputField\">\n                <input\n                    className=\"input\"\n                    type={this.props.type}\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    onChange={(e) => this.props.onChange(e.target.value)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default InputField;\n","import React from \"react\";\n\nclass SubmitButton extends React.Component {\n    render() {\n        return (\n            <div className=\"submitButton\">\n                <button\n                    className=\"btn\"\n                    disabled={this.props.disabled}\n                    onClick={() => this.props.onClick()}\n                >\n                    {this.props.text}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default SubmitButton;\n","import React from \"react\";\nimport InputField from \"./InputField\";\nimport SubmitButton from \"./SubmitButton\";\nimport UserStore from \"./stores/UserStore\";\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            buttonDisabled: false,\n        };\n    }\n\n    setInputValue(property, val) {\n        val = val.trim();\n        if (val.length > 12) {\n            return;\n        }\n        this.setState({\n            [property]: val,\n        });\n    }\n\n    resetForm() {\n        this.setState({\n            username: \"\",\n            password: \"\",\n            buttonDisabled: false,\n        });\n    }\n\n    async doLogin() {\n        if (!this.state.username) {\n            return;\n        }\n        if (!this.state.password) {\n            return;\n        }\n\n        this.setState({\n            buttonDisabled: true,\n        });\n\n        try {\n            let res = await fetch(\"/login\", {\n                method: \"post\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password,\n                }),\n            });\n            let result = await res.json();\n            if (result && result.success) {\n                UserStore.isLoggedIN = true;\n                UserStore.username = result.username;\n            } else if (result && result.success === false) {\n                this.resetForm();\n                alert(result.msg);\n            }\n        } catch (e) {\n            console.log(e);\n            this.resetForm();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"loginForm\">\n                <h1>Log In</h1>\n                <InputField\n                    type=\"text\"\n                    placeholder=\"Username\"\n                    value={this.state.username ? this.state.username : \"\"}\n                    onChange={(val) => this.setInputValue(\"username\", val)}\n                />\n                <InputField\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password ? this.state.password : \"\"}\n                    onChange={(val) => this.setInputValue(\"password\", val)}\n                />\n                <SubmitButton\n                    text=\"Login\"\n                    disabled={this.state.buttonDisabled}\n                    onClick={() => this.doLogin()}\n                />\n            </div>\n        );\n    }\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > svg': {\n      margin: theme.spacing(2),\n    },\n  },\n}));\n\nfunction HomeIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n    </SvgIcon>\n  );\n}\n\nexport default function SvgIconsSize() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <HomeIcon style={{ fontSize: 40 }} />\n    </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: '40px',\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 900,\n    height: 30,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  \n}));\n\nexport default function CustomizedInputBase() {\n  const classes = useStyles();\n\n  return (\n    <Paper component=\"form\" className={classes.root}>\n      \n      <InputBase\n        className={classes.input}\n        placeholder=\"Search\"\n        inputProps={{ 'aria-label': 'search' }}\n      />\n      <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n      \n    </Paper>\n  );\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function BasicButtonGroup() {\n  const classes = useStyles();\n\n\n// button color needs to be fixed\n  \n  return (\n    <div className={classes.root}>\n      <ButtonGroup variant=\"contained\" color=\"grey\" aria-label=\"contained primary button group\">\n        <Button>One</Button>\n        <Button>Two</Button>\n        <Button>Three</Button>\n      </ButtonGroup>\n    </div>\n  );\n}","import React from 'react';\nimport { createMuiTheme, withStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { green, purple, orange } from '@material-ui/core/colors';\n\nconst BootstrapButton = withStyles({\n  root: {\n    boxShadow: 'none',\n    textTransform: 'none',\n    fontSize: 16,\n    padding: '6px 12px',\n    border: '1px solid',\n    lineHeight: 1.5,\n    backgroundColor: '#0063cc',\n    borderColor: '#0063cc',\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:hover': {\n      backgroundColor: '#0069d9',\n      borderColor: '#0062cc',\n      boxShadow: 'none',\n    },\n    '&:active': {\n      boxShadow: 'none',\n      backgroundColor: '#0062cc',\n      borderColor: '#005cbf',\n    },\n    '&:focus': {\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\n    },\n  },\n})(Button);\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(purple[500]),\n    backgroundColor: purple[500],\n    '&:hover': {\n      backgroundColor: purple[700],\n    },\n  },\n}))(Button);\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: orange,\n  },\n});\n\nexport default function CustomizedButtons() {\n  const classes = useStyles();\n\n  return (\n    <div style= {{display: 'flex', flexDirection: 'column',justifyContent: 'space-between'}}>\n      <ColorButton variant=\"contained\" color=\"primary\" className={classes.margin}>\n        CSS\n      </ColorButton>\n      <ThemeProvider theme={theme}>\n        <Button variant=\"contained\" color=\"primary\" className={classes.margin}>\n          HTML\n        </Button>\n      </ThemeProvider>\n      <BootstrapButton variant=\"contained\" color=\"primary\" className={classes.margin}>\n        JavaScript\n      </BootstrapButton>\n    </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          YouTube Video Here\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          title\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          description\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          video image\n          <br />\n          \n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Link</Button>\n      </CardActions>\n    </Card>\n  );\n}","import axios from \"axios\";\r\n\r\nexport default {\r\n    getYoutubeVideos: function() {\r\n        return axios.get(\"/api/youtube/getvideos\");\r\n    }\r\n\r\n\r\n\r\n\r\n    // get all the books\r\n    // getExample: function() {\r\n    //     return axios.get(\"/api/route\");\r\n    // },\r\n    // save a new book to mongodb\r\n    // postExample: function(data) {\r\n    //     return axios.post(\"/api/route\", data);\r\n    // }\r\n};","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport UserStore from \"./stores/UserStore\";\nimport LoginForm from \"./LoginForm\";\nimport SubmitButton from \"./SubmitButton\";\nimport \"./App.css\";\nimport MainPage from \"./Pages/mainPage\";\nimport API from \"./utils/API\";\n\nclass App extends React.Component {\n  async componentDidMount() {\n    let videos =  API.getYoutubeVideos();\n\n\n    try {\n      let res = await fetch(\"/isLoggedIn\", {\n        method: \"post\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      } else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n    } catch (e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n  async doLogout() {\n    try {\n      let res = await fetch(\"/logout\", {\n        method: \"post\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      let result = await res.json();\n      \n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = \"\";\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  \n  render() {\n    // if (UserStore.loading) {\n    //   return (\n    //     <div className=\"app\">\n    //       <div className=\"container\">Loading, Please Wait...</div>\n    //     </div>\n    //   );\n    // } else {\n    //   if (UserStore.isLoggedIn) {\n    //     return (\n    //       <div className=\"app\">\n    //         <div className=\"container\">\n    //           Welcome {UserStore.username}\n    //           <SubmitButton\n    //             text={\"Log out\"}\n    //             disable={false}\n    //             onClick={() => this.doLogout()}\n    //           />\n    //         </div>\n    //       </div>\n    //     );\n    //   }\n      \n      return (\n        <div>\n          hello\n          {/* <MainPage></MainPage> */}\n          {/* <div className=\"container\">\n            <LoginForm />\n          </div> */}\n        </div>\n      );\n  //   }\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}